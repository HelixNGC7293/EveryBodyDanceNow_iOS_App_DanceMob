import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F

__weights_dict = dict()

def load_weights(weight_file):
    if weight_file == None:
        return

    try:
        weights_dict = np.load(weight_file).item()
    except:
        weights_dict = np.load(weight_file, encoding='bytes').item()

    return weights_dict

class KitModel(nn.Module):

    
    def __init__(self, weight_file):
        super(KitModel, self).__init__()
        global __weights_dict
        __weights_dict = load_weights(weight_file)

        self.conv1_1 = self.__conv(2, name='conv1_1', in_channels=3, out_channels=64, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv1_2 = self.__conv(2, name='conv1_2', in_channels=64, out_channels=64, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv2_1 = self.__conv(2, name='conv2_1', in_channels=64, out_channels=128, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv2_2 = self.__conv(2, name='conv2_2', in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv3_1 = self.__conv(2, name='conv3_1', in_channels=128, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv3_2 = self.__conv(2, name='conv3_2', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv3_3 = self.__conv(2, name='conv3_3', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv3_4 = self.__conv(2, name='conv3_4', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv4_1 = self.__conv(2, name='conv4_1', in_channels=256, out_channels=512, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv4_2 = self.__conv(2, name='conv4_2', in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv4_3 = self.__conv(2, name='conv4_3', in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv4_4 = self.__conv(2, name='conv4_4', in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv5_1 = self.__conv(2, name='conv5_1', in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv5_2 = self.__conv(2, name='conv5_2', in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv5_3_CPM = self.__conv(2, name='conv5_3_CPM', in_channels=512, out_channels=128, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.conv6_1_CPM = self.__conv(2, name='conv6_1_CPM', in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.conv6_2_CPM = self.__conv(2, name='conv6_2_CPM', in_channels=512, out_channels=71, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.Mconv1_stage2 = self.__conv(2, name='Mconv1_stage2', in_channels=199, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv2_stage2 = self.__conv(2, name='Mconv2_stage2', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv3_stage2 = self.__conv(2, name='Mconv3_stage2', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv4_stage2 = self.__conv(2, name='Mconv4_stage2', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv5_stage2 = self.__conv(2, name='Mconv5_stage2', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv6_stage2 = self.__conv(2, name='Mconv6_stage2', in_channels=128, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.Mconv7_stage2 = self.__conv(2, name='Mconv7_stage2', in_channels=128, out_channels=71, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.Mconv1_stage3 = self.__conv(2, name='Mconv1_stage3', in_channels=199, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv2_stage3 = self.__conv(2, name='Mconv2_stage3', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv3_stage3 = self.__conv(2, name='Mconv3_stage3', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv4_stage3 = self.__conv(2, name='Mconv4_stage3', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv5_stage3 = self.__conv(2, name='Mconv5_stage3', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv6_stage3 = self.__conv(2, name='Mconv6_stage3', in_channels=128, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.Mconv7_stage3 = self.__conv(2, name='Mconv7_stage3', in_channels=128, out_channels=71, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.Mconv1_stage4 = self.__conv(2, name='Mconv1_stage4', in_channels=199, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv2_stage4 = self.__conv(2, name='Mconv2_stage4', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv3_stage4 = self.__conv(2, name='Mconv3_stage4', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv4_stage4 = self.__conv(2, name='Mconv4_stage4', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv5_stage4 = self.__conv(2, name='Mconv5_stage4', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv6_stage4 = self.__conv(2, name='Mconv6_stage4', in_channels=128, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.Mconv7_stage4 = self.__conv(2, name='Mconv7_stage4', in_channels=128, out_channels=71, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.Mconv1_stage5 = self.__conv(2, name='Mconv1_stage5', in_channels=199, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv2_stage5 = self.__conv(2, name='Mconv2_stage5', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv3_stage5 = self.__conv(2, name='Mconv3_stage5', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv4_stage5 = self.__conv(2, name='Mconv4_stage5', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv5_stage5 = self.__conv(2, name='Mconv5_stage5', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv6_stage5 = self.__conv(2, name='Mconv6_stage5', in_channels=128, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.Mconv7_stage5 = self.__conv(2, name='Mconv7_stage5', in_channels=128, out_channels=71, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.Mconv1_stage6 = self.__conv(2, name='Mconv1_stage6', in_channels=199, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv2_stage6 = self.__conv(2, name='Mconv2_stage6', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv3_stage6 = self.__conv(2, name='Mconv3_stage6', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv4_stage6 = self.__conv(2, name='Mconv4_stage6', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv5_stage6 = self.__conv(2, name='Mconv5_stage6', in_channels=128, out_channels=128, kernel_size=(7, 7), stride=(1, 1), groups=1, bias=True)
        self.Mconv6_stage6 = self.__conv(2, name='Mconv6_stage6', in_channels=128, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.Mconv7_stage6 = self.__conv(2, name='Mconv7_stage6', in_channels=128, out_channels=71, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)

    def forward(self, x):
        conv1_1_pad     = F.pad(x, (1, 1, 1, 1))
        conv1_1         = self.conv1_1(conv1_1_pad)
        conv1_1_re      = F.relu(conv1_1)
        conv1_2_pad     = F.pad(conv1_1_re, (1, 1, 1, 1))
        conv1_2         = self.conv1_2(conv1_2_pad)
        conv1_2_re      = F.relu(conv1_2)
        pool1_pad       = F.pad(conv1_2_re, (0, 1, 0, 1), value=float('-inf'))
        pool1           = F.max_pool2d(pool1_pad, kernel_size=(2, 2), stride=(2, 2), padding=0, ceil_mode=False)
        conv2_1_pad     = F.pad(pool1, (1, 1, 1, 1))
        conv2_1         = self.conv2_1(conv2_1_pad)
        conv2_1_re      = F.relu(conv2_1)
        conv2_2_pad     = F.pad(conv2_1_re, (1, 1, 1, 1))
        conv2_2         = self.conv2_2(conv2_2_pad)
        conv2_2_re      = F.relu(conv2_2)
        pool2_pad       = F.pad(conv2_2_re, (0, 1, 0, 1), value=float('-inf'))
        pool2           = F.max_pool2d(pool2_pad, kernel_size=(2, 2), stride=(2, 2), padding=0, ceil_mode=False)
        conv3_1_pad     = F.pad(pool2, (1, 1, 1, 1))
        conv3_1         = self.conv3_1(conv3_1_pad)
        conv3_1_re      = F.relu(conv3_1)
        conv3_2_pad     = F.pad(conv3_1_re, (1, 1, 1, 1))
        conv3_2         = self.conv3_2(conv3_2_pad)
        conv3_2_re      = F.relu(conv3_2)
        conv3_3_pad     = F.pad(conv3_2_re, (1, 1, 1, 1))
        conv3_3         = self.conv3_3(conv3_3_pad)
        conv3_3_re      = F.relu(conv3_3)
        conv3_4_pad     = F.pad(conv3_3_re, (1, 1, 1, 1))
        conv3_4         = self.conv3_4(conv3_4_pad)
        conv3_4_re      = F.relu(conv3_4)
        pool3_pad       = F.pad(conv3_4_re, (0, 1, 0, 1), value=float('-inf'))
        pool3           = F.max_pool2d(pool3_pad, kernel_size=(2, 2), stride=(2, 2), padding=0, ceil_mode=False)
        conv4_1_pad     = F.pad(pool3, (1, 1, 1, 1))
        conv4_1         = self.conv4_1(conv4_1_pad)
        conv4_1_re      = F.relu(conv4_1)
        conv4_2_pad     = F.pad(conv4_1_re, (1, 1, 1, 1))
        conv4_2         = self.conv4_2(conv4_2_pad)
        conv4_2_re      = F.relu(conv4_2)
        conv4_3_pad     = F.pad(conv4_2_re, (1, 1, 1, 1))
        conv4_3         = self.conv4_3(conv4_3_pad)
        conv4_3_re      = F.relu(conv4_3)
        conv4_4_pad     = F.pad(conv4_3_re, (1, 1, 1, 1))
        conv4_4         = self.conv4_4(conv4_4_pad)
        conv4_4_re      = F.relu(conv4_4)
        conv5_1_pad     = F.pad(conv4_4_re, (1, 1, 1, 1))
        conv5_1         = self.conv5_1(conv5_1_pad)
        conv5_1_re      = F.relu(conv5_1)
        conv5_2_pad     = F.pad(conv5_1_re, (1, 1, 1, 1))
        conv5_2         = self.conv5_2(conv5_2_pad)
        conv5_2_re      = F.relu(conv5_2)
        conv5_3_CPM_pad = F.pad(conv5_2_re, (1, 1, 1, 1))
        conv5_3_CPM     = self.conv5_3_CPM(conv5_3_CPM_pad)
        conv5_3_CPM_re  = F.relu(conv5_3_CPM)
        conv6_1_CPM     = self.conv6_1_CPM(conv5_3_CPM_re)
        conv6_1_CPM_re  = F.relu(conv6_1_CPM)
        conv6_2_CPM     = self.conv6_2_CPM(conv6_1_CPM_re)
        features_in_stage_2 = torch.cat((conv6_2_CPM, conv5_3_CPM_re), 1)
        Mconv1_stage2_pad = F.pad(features_in_stage_2, (3, 3, 3, 3))
        Mconv1_stage2   = self.Mconv1_stage2(Mconv1_stage2_pad)
        Mconv1_stage2_re = F.relu(Mconv1_stage2)
        Mconv2_stage2_pad = F.pad(Mconv1_stage2_re, (3, 3, 3, 3))
        Mconv2_stage2   = self.Mconv2_stage2(Mconv2_stage2_pad)
        Mconv2_stage2_re = F.relu(Mconv2_stage2)
        Mconv3_stage2_pad = F.pad(Mconv2_stage2_re, (3, 3, 3, 3))
        Mconv3_stage2   = self.Mconv3_stage2(Mconv3_stage2_pad)
        Mconv3_stage2_re = F.relu(Mconv3_stage2)
        Mconv4_stage2_pad = F.pad(Mconv3_stage2_re, (3, 3, 3, 3))
        Mconv4_stage2   = self.Mconv4_stage2(Mconv4_stage2_pad)
        Mconv4_stage2_re = F.relu(Mconv4_stage2)
        Mconv5_stage2_pad = F.pad(Mconv4_stage2_re, (3, 3, 3, 3))
        Mconv5_stage2   = self.Mconv5_stage2(Mconv5_stage2_pad)
        Mconv5_stage2_re = F.relu(Mconv5_stage2)
        Mconv6_stage2   = self.Mconv6_stage2(Mconv5_stage2_re)
        Mconv6_stage2_re = F.relu(Mconv6_stage2)
        Mconv7_stage2   = self.Mconv7_stage2(Mconv6_stage2_re)
        features_in_stage_3 = torch.cat((Mconv7_stage2, conv5_3_CPM_re), 1)
        Mconv1_stage3_pad = F.pad(features_in_stage_3, (3, 3, 3, 3))
        Mconv1_stage3   = self.Mconv1_stage3(Mconv1_stage3_pad)
        Mconv1_stage3_re = F.relu(Mconv1_stage3)
        Mconv2_stage3_pad = F.pad(Mconv1_stage3_re, (3, 3, 3, 3))
        Mconv2_stage3   = self.Mconv2_stage3(Mconv2_stage3_pad)
        Mconv2_stage3_re = F.relu(Mconv2_stage3)
        Mconv3_stage3_pad = F.pad(Mconv2_stage3_re, (3, 3, 3, 3))
        Mconv3_stage3   = self.Mconv3_stage3(Mconv3_stage3_pad)
        Mconv3_stage3_re = F.relu(Mconv3_stage3)
        Mconv4_stage3_pad = F.pad(Mconv3_stage3_re, (3, 3, 3, 3))
        Mconv4_stage3   = self.Mconv4_stage3(Mconv4_stage3_pad)
        Mconv4_stage3_re = F.relu(Mconv4_stage3)
        Mconv5_stage3_pad = F.pad(Mconv4_stage3_re, (3, 3, 3, 3))
        Mconv5_stage3   = self.Mconv5_stage3(Mconv5_stage3_pad)
        Mconv5_stage3_re = F.relu(Mconv5_stage3)
        Mconv6_stage3   = self.Mconv6_stage3(Mconv5_stage3_re)
        Mconv6_stage3_re = F.relu(Mconv6_stage3)
        Mconv7_stage3   = self.Mconv7_stage3(Mconv6_stage3_re)
        features_in_stage_4 = torch.cat((Mconv7_stage3, conv5_3_CPM_re), 1)
        Mconv1_stage4_pad = F.pad(features_in_stage_4, (3, 3, 3, 3))
        Mconv1_stage4   = self.Mconv1_stage4(Mconv1_stage4_pad)
        Mconv1_stage4_re = F.relu(Mconv1_stage4)
        Mconv2_stage4_pad = F.pad(Mconv1_stage4_re, (3, 3, 3, 3))
        Mconv2_stage4   = self.Mconv2_stage4(Mconv2_stage4_pad)
        Mconv2_stage4_re = F.relu(Mconv2_stage4)
        Mconv3_stage4_pad = F.pad(Mconv2_stage4_re, (3, 3, 3, 3))
        Mconv3_stage4   = self.Mconv3_stage4(Mconv3_stage4_pad)
        Mconv3_stage4_re = F.relu(Mconv3_stage4)
        Mconv4_stage4_pad = F.pad(Mconv3_stage4_re, (3, 3, 3, 3))
        Mconv4_stage4   = self.Mconv4_stage4(Mconv4_stage4_pad)
        Mconv4_stage4_re = F.relu(Mconv4_stage4)
        Mconv5_stage4_pad = F.pad(Mconv4_stage4_re, (3, 3, 3, 3))
        Mconv5_stage4   = self.Mconv5_stage4(Mconv5_stage4_pad)
        Mconv5_stage4_re = F.relu(Mconv5_stage4)
        Mconv6_stage4   = self.Mconv6_stage4(Mconv5_stage4_re)
        Mconv6_stage4_re = F.relu(Mconv6_stage4)
        Mconv7_stage4   = self.Mconv7_stage4(Mconv6_stage4_re)
        features_in_stage_5 = torch.cat((Mconv7_stage4, conv5_3_CPM_re), 1)
        Mconv1_stage5_pad = F.pad(features_in_stage_5, (3, 3, 3, 3))
        Mconv1_stage5   = self.Mconv1_stage5(Mconv1_stage5_pad)
        Mconv1_stage5_re = F.relu(Mconv1_stage5)
        Mconv2_stage5_pad = F.pad(Mconv1_stage5_re, (3, 3, 3, 3))
        Mconv2_stage5   = self.Mconv2_stage5(Mconv2_stage5_pad)
        Mconv2_stage5_re = F.relu(Mconv2_stage5)
        Mconv3_stage5_pad = F.pad(Mconv2_stage5_re, (3, 3, 3, 3))
        Mconv3_stage5   = self.Mconv3_stage5(Mconv3_stage5_pad)
        Mconv3_stage5_re = F.relu(Mconv3_stage5)
        Mconv4_stage5_pad = F.pad(Mconv3_stage5_re, (3, 3, 3, 3))
        Mconv4_stage5   = self.Mconv4_stage5(Mconv4_stage5_pad)
        Mconv4_stage5_re = F.relu(Mconv4_stage5)
        Mconv5_stage5_pad = F.pad(Mconv4_stage5_re, (3, 3, 3, 3))
        Mconv5_stage5   = self.Mconv5_stage5(Mconv5_stage5_pad)
        Mconv5_stage5_re = F.relu(Mconv5_stage5)
        Mconv6_stage5   = self.Mconv6_stage5(Mconv5_stage5_re)
        Mconv6_stage5_re = F.relu(Mconv6_stage5)
        Mconv7_stage5   = self.Mconv7_stage5(Mconv6_stage5_re)
        features_in_stage_6 = torch.cat((Mconv7_stage5, conv5_3_CPM_re), 1)
        Mconv1_stage6_pad = F.pad(features_in_stage_6, (3, 3, 3, 3))
        Mconv1_stage6   = self.Mconv1_stage6(Mconv1_stage6_pad)
        Mconv1_stage6_re = F.relu(Mconv1_stage6)
        Mconv2_stage6_pad = F.pad(Mconv1_stage6_re, (3, 3, 3, 3))
        Mconv2_stage6   = self.Mconv2_stage6(Mconv2_stage6_pad)
        Mconv2_stage6_re = F.relu(Mconv2_stage6)
        Mconv3_stage6_pad = F.pad(Mconv2_stage6_re, (3, 3, 3, 3))
        Mconv3_stage6   = self.Mconv3_stage6(Mconv3_stage6_pad)
        Mconv3_stage6_re = F.relu(Mconv3_stage6)
        Mconv4_stage6_pad = F.pad(Mconv3_stage6_re, (3, 3, 3, 3))
        Mconv4_stage6   = self.Mconv4_stage6(Mconv4_stage6_pad)
        Mconv4_stage6_re = F.relu(Mconv4_stage6)
        Mconv5_stage6_pad = F.pad(Mconv4_stage6_re, (3, 3, 3, 3))
        Mconv5_stage6   = self.Mconv5_stage6(Mconv5_stage6_pad)
        Mconv5_stage6_re = F.relu(Mconv5_stage6)
        Mconv6_stage6   = self.Mconv6_stage6(Mconv5_stage6_re)
        Mconv6_stage6_re = F.relu(Mconv6_stage6)
        Mconv7_stage6   = self.Mconv7_stage6(Mconv6_stage6_re)
        return Mconv7_stage6


    @staticmethod
    def __conv(dim, name, **kwargs):
        if   dim == 1:  layer = nn.Conv1d(**kwargs)
        elif dim == 2:  layer = nn.Conv2d(**kwargs)
        elif dim == 3:  layer = nn.Conv3d(**kwargs)
        else:           raise NotImplementedError()

        layer.state_dict()['weight'].copy_(torch.from_numpy(__weights_dict[name]['weights']))
        if 'bias' in __weights_dict[name]:
            layer.state_dict()['bias'].copy_(torch.from_numpy(__weights_dict[name]['bias']))
        return layer

model = KitModel('pose_pytorch.npy')
input_size = (1, 3, 368, 368)
